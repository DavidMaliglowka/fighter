# Task ID: 4
# Title: Implement Three Attack Types System (Heavy, Light, Range)
# Status: pending
# Dependencies: 3
# Priority: medium
# Description: Add three distinct attack types with different properties: heavy attacks for high damage with slow recovery, light attacks for quick strikes with lower damage, and ranged attacks that fire projectiles across the battlefield.
# Details:
Extend handleCombat() to support three attack types triggered by different key combinations: Space (light attack), Shift+Space (heavy attack), Z+Space (range attack). Heavy attacks: 25 damage, 800ms cooldown, larger hit radius (100px), slight charge time. Light attacks: 10 damage, 300ms cooldown, standard radius (70px), instant. Range attacks: 15 damage, 1000ms cooldown, projectile physics with 400px/s velocity, despawn after 2 seconds or wall collision. Add attack type validation, damage scaling, and visual feedback for each type. Implement projectile system with collision detection against players and platforms.

# Test Strategy:
Test all three attack types work with proper key combinations, damage values and cooldowns are correct, projectiles spawn and move correctly with collision detection. Verify attack type validation prevents spam and visual feedback displays appropriately across multiple clients.

# Subtasks:
## 1. Attack Type Input Handling and Key Combinations [pending]
### Dependencies: None
### Description: Implement input detection for three distinct attack types with different key combinations
### Details:
Add input handling for three attack types: Space (light attack), Shift+Space (heavy attack), Z+Space (range attack). Implement key combination detection in client-side input system. Add attack type validation to prevent conflicting inputs. Create attack type enumeration and state tracking in player object. Ensure proper input buffering and prevent input spam during cooldown periods.

## 2. Heavy Attack Implementation with Damage and Cooldown [pending]
### Dependencies: 4.1
### Description: Implement heavy attack mechanics with high damage, slow recovery, and larger hit radius
### Details:
Implement heavy attack system: 25 damage, 800ms cooldown, larger hit radius (100px). Add slight charge time before attack execution to balance high damage. Implement cooldown tracking and validation to prevent spam. Add hit detection with expanded radius for heavy attacks. Create visual feedback for charge time and attack execution. Sync heavy attack state and effects across all clients.

## 3. Light Attack Implementation with Fast Execution [pending]
### Dependencies: 4.1
### Description: Implement light attack mechanics with quick strikes and lower damage
### Details:
Implement light attack system: 10 damage, 300ms cooldown, standard radius (70px), instant execution. Add fast attack animation and immediate hit detection. Implement cooldown tracking for light attacks. Create responsive visual feedback for quick strikes. Ensure light attacks feel snappy and responsive with minimal delay. Sync light attack state across all clients with optimized network updates.

## 4. Projectile System and Physics Implementation [pending]
### Dependencies: 4.1
### Description: Create projectile system with physics, collision detection, and lifecycle management
### Details:
Implement projectile system for ranged attacks: 400px/s velocity, 2-second lifespan. Add projectile physics with trajectory calculation and movement. Implement collision detection against players and platforms. Add projectile spawning at player position with direction based on facing. Create projectile cleanup system for despawn after timeout or collision. Add visual projectile representation with trail effects.

## 5. Range Attack Implementation with Projectile Integration [pending]
### Dependencies: 4.4
### Description: Implement ranged attack mechanics that spawn and manage projectiles
### Details:
Implement range attack system: 15 damage, 1000ms cooldown, projectile-based damage. Integrate projectile spawning with range attack input. Add projectile-to-player collision detection and damage application. Implement cooldown tracking for ranged attacks. Add visual feedback for projectile firing and impact effects. Sync projectile state and collisions across all clients with authoritative server validation.

## 6. Attack Type Validation and Visual Feedback System [pending]
### Dependencies: 4.2, 4.3, 4.5
### Description: Implement server-side validation and comprehensive visual feedback for all attack types
### Details:
Add server-side validation for all attack types to prevent cheating and ensure proper cooldown enforcement. Implement comprehensive visual feedback system: attack animations, damage numbers, cooldown indicators, and type-specific effects. Add attack type indicators in UI to show which attacks are available. Create consistent visual language for each attack type with distinct colors and effects. Implement network synchronization for all visual feedback across clients.

